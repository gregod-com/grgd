package persistence

import (
	"fmt"

	"github.com/keybase/go-keychain"
)

func placeholder() {
	item := keychain.NewItem()
	item.SetSecClass(keychain.SecClassGenericPassword)
	item.SetService("grgd")
	item.SetAccount("gregor")
	item.SetLabel("grgd-master-password")
	item.SetAccessGroup("A123456789.group.com.mycorp")

	item.SetData([]byte("toomanysecrets"))

	item.SetSynchronizable(keychain.SynchronizableNo)
	item.SetAccessible(keychain.AccessibleWhenUnlocked)
	errkey := keychain.AddItem(item)

	if errkey == keychain.ErrorDuplicateItem {
		fmt.Println("Duplicate")
	}

	// query := keychain.NewItem()
	// query.SetSecClass(keychain.SecClassGenericPassword)
	// query.SetService("grgd")
	// query.SetAccount("gregor")
	// query.SetAccessGroup("A123456789.group.com.mycorp")
	// query.SetMatchLimit(keychain.MatchLimitOne)
	// query.SetReturnData(true)
	// results, err := keychain.QueryItem(query)
	// if err != nil {
	// 	// Error
	// } else {
	// 	for _, r := range results {
	// 		fmt.Printf("%#v\n", string(r.Data))
	// 	}
	// }
}
