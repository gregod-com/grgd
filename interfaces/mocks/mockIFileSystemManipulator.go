// Code generated by MockGen. DO NOT EDIT.
// Source: IFileSystemManipulator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockIFileSystemManipulator is a mock of IFileSystemManipulator interface
type MockIFileSystemManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockIFileSystemManipulatorMockRecorder
}

// MockIFileSystemManipulatorMockRecorder is the mock recorder for MockIFileSystemManipulator
type MockIFileSystemManipulatorMockRecorder struct {
	mock *MockIFileSystemManipulator
}

// NewMockIFileSystemManipulator creates a new mock instance
func NewMockIFileSystemManipulator(ctrl *gomock.Controller) *MockIFileSystemManipulator {
	mock := &MockIFileSystemManipulator{ctrl: ctrl}
	mock.recorder = &MockIFileSystemManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFileSystemManipulator) EXPECT() *MockIFileSystemManipulatorMockRecorder {
	return m.recorder
}

// HomeDir mocks base method
func (m *MockIFileSystemManipulator) HomeDir(i ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HomeDir", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// HomeDir indicates an expected call of HomeDir
func (mr *MockIFileSystemManipulatorMockRecorder) HomeDir(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HomeDir", reflect.TypeOf((*MockIFileSystemManipulator)(nil).HomeDir), i...)
}

// CheckOrCreateFolder mocks base method
func (m *MockIFileSystemManipulator) CheckOrCreateFolder(path string, permissions os.FileMode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckOrCreateFolder", path, permissions)
}

// CheckOrCreateFolder indicates an expected call of CheckOrCreateFolder
func (mr *MockIFileSystemManipulatorMockRecorder) CheckOrCreateFolder(path, permissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrCreateFolder", reflect.TypeOf((*MockIFileSystemManipulator)(nil).CheckOrCreateFolder), path, permissions)
}

// PathExists mocks base method
func (m *MockIFileSystemManipulator) PathExists(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathExists", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PathExists indicates an expected call of PathExists
func (mr *MockIFileSystemManipulatorMockRecorder) PathExists(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathExists", reflect.TypeOf((*MockIFileSystemManipulator)(nil).PathExists), path)
}
