// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/IProfile.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/gregod-com/grgd/interfaces"
	reflect "reflect"
)

// MockIProfile is a mock of IProfile interface
type MockIProfile struct {
	ctrl     *gomock.Controller
	recorder *MockIProfileMockRecorder
}

// MockIProfileMockRecorder is the mock recorder for MockIProfile
type MockIProfileMockRecorder struct {
	mock *MockIProfile
}

// NewMockIProfile creates a new mock instance
func NewMockIProfile(ctrl *gomock.Controller) *MockIProfile {
	mock := &MockIProfile{ctrl: ctrl}
	mock.recorder = &MockIProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIProfile) EXPECT() *MockIProfileMockRecorder {
	return m.recorder
}

// SetID mocks base method
func (m *MockIProfile) SetID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetID indicates an expected call of SetID
func (mr *MockIProfileMockRecorder) SetID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockIProfile)(nil).SetID), id)
}

// GetID mocks base method
func (m *MockIProfile) GetID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockIProfileMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockIProfile)(nil).GetID))
}

// IsInitialized mocks base method
func (m *MockIProfile) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized
func (mr *MockIProfileMockRecorder) IsInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockIProfile)(nil).IsInitialized))
}

// SetInitialized mocks base method
func (m *MockIProfile) SetInitialized(init bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInitialized", init)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInitialized indicates an expected call of SetInitialized
func (mr *MockIProfileMockRecorder) SetInitialized(init interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInitialized", reflect.TypeOf((*MockIProfile)(nil).SetInitialized), init)
}

// GetName mocks base method
func (m *MockIProfile) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockIProfileMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIProfile)(nil).GetName))
}

// SetName mocks base method
func (m *MockIProfile) SetName(n string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetName", n)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetName indicates an expected call of SetName
func (mr *MockIProfileMockRecorder) SetName(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockIProfile)(nil).SetName), n)
}

// GetCurrentProject mocks base method
func (m *MockIProfile) GetCurrentProject() interfaces.IProject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentProject")
	ret0, _ := ret[0].(interfaces.IProject)
	return ret0
}

// GetCurrentProject indicates an expected call of GetCurrentProject
func (mr *MockIProfileMockRecorder) GetCurrentProject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentProject", reflect.TypeOf((*MockIProfile)(nil).GetCurrentProject))
}

// SetCurrentProject mocks base method
func (m *MockIProfile) SetCurrentProject(p interfaces.IProject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentProject", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentProject indicates an expected call of SetCurrentProject
func (mr *MockIProfileMockRecorder) SetCurrentProject(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentProject", reflect.TypeOf((*MockIProfile)(nil).SetCurrentProject), p)
}

// GetMetaData mocks base method
func (m *MockIProfile) GetMetaData(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaData", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMetaData indicates an expected call of GetMetaData
func (mr *MockIProfileMockRecorder) GetMetaData(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaData", reflect.TypeOf((*MockIProfile)(nil).GetMetaData), key)
}

// SetMetaData mocks base method
func (m *MockIProfile) SetMetaData(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMetaData", key, value)
}

// SetMetaData indicates an expected call of SetMetaData
func (mr *MockIProfileMockRecorder) SetMetaData(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetaData", reflect.TypeOf((*MockIProfile)(nil).SetMetaData), key, value)
}

// GetBasePath mocks base method
func (m *MockIProfile) GetBasePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBasePath indicates an expected call of GetBasePath
func (mr *MockIProfileMockRecorder) GetBasePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasePath", reflect.TypeOf((*MockIProfile)(nil).GetBasePath))
}

// GetUpdateURL mocks base method
func (m *MockIProfile) GetUpdateURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUpdateURL indicates an expected call of GetUpdateURL
func (mr *MockIProfileMockRecorder) GetUpdateURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateURL", reflect.TypeOf((*MockIProfile)(nil).GetUpdateURL))
}

// GetProjects mocks base method
func (m *MockIProfile) GetProjects() map[string]interfaces.IProject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects")
	ret0, _ := ret[0].(map[string]interfaces.IProject)
	return ret0
}

// GetProjects indicates an expected call of GetProjects
func (mr *MockIProfileMockRecorder) GetProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockIProfile)(nil).GetProjects))
}

// AddProject mocks base method
func (m *MockIProfile) AddProject(p string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProject", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProject indicates an expected call of AddProject
func (mr *MockIProfileMockRecorder) AddProject(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProject", reflect.TypeOf((*MockIProfile)(nil).AddProject), p)
}

// RemoveProject mocks base method
func (m *MockIProfile) RemoveProject(p interfaces.IProject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProject", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProject indicates an expected call of RemoveProject
func (mr *MockIProfileMockRecorder) RemoveProject(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProject", reflect.TypeOf((*MockIProfile)(nil).RemoveProject), p)
}

// RemoveProjectByName mocks base method
func (m *MockIProfile) RemoveProjectByName(p string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProjectByName", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProjectByName indicates an expected call of RemoveProjectByName
func (mr *MockIProfileMockRecorder) RemoveProjectByName(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProjectByName", reflect.TypeOf((*MockIProfile)(nil).RemoveProjectByName), p)
}

// GetValues mocks base method
func (m *MockIProfile) GetValues(i ...interface{}) []string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValues", varargs...)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetValues indicates an expected call of GetValues
func (mr *MockIProfileMockRecorder) GetValues(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValues", reflect.TypeOf((*MockIProfile)(nil).GetValues), i...)
}

// GetValuesAsMap mocks base method
func (m *MockIProfile) GetValuesAsMap(i ...interface{}) map[string]string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValuesAsMap", varargs...)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetValuesAsMap indicates an expected call of GetValuesAsMap
func (mr *MockIProfileMockRecorder) GetValuesAsMap(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValuesAsMap", reflect.TypeOf((*MockIProfile)(nil).GetValuesAsMap), i...)
}

// GetProjectsTable mocks base method
func (m *MockIProfile) GetProjectsTable() [][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectsTable")
	ret0, _ := ret[0].([][]string)
	return ret0
}

// GetProjectsTable indicates an expected call of GetProjectsTable
func (mr *MockIProfileMockRecorder) GetProjectsTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectsTable", reflect.TypeOf((*MockIProfile)(nil).GetProjectsTable))
}
