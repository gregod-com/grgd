// Code generated by MockGen. DO NOT EDIT.
// Source: IPluginLoader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	grgdplugincontracts "github.com/gregod-com/grgdplugincontracts"
	reflect "reflect"
)

// MockIPluginLoader is a mock of IPluginLoader interface
type MockIPluginLoader struct {
	ctrl     *gomock.Controller
	recorder *MockIPluginLoaderMockRecorder
}

// MockIPluginLoaderMockRecorder is the mock recorder for MockIPluginLoader
type MockIPluginLoaderMockRecorder struct {
	mock *MockIPluginLoader
}

// NewMockIPluginLoader creates a new mock instance
func NewMockIPluginLoader(ctrl *gomock.Controller) *MockIPluginLoader {
	mock := &MockIPluginLoader{ctrl: ctrl}
	mock.recorder = &MockIPluginLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPluginLoader) EXPECT() *MockIPluginLoaderMockRecorder {
	return m.recorder
}

// LoadPlugins mocks base method
func (m *MockIPluginLoader) LoadPlugins(pluginFolder string) ([]grgdplugincontracts.ICMDPlugin, grgdplugincontracts.IUIPlugin) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPlugins", pluginFolder)
	ret0, _ := ret[0].([]grgdplugincontracts.ICMDPlugin)
	ret1, _ := ret[1].(grgdplugincontracts.IUIPlugin)
	return ret0, ret1
}

// LoadPlugins indicates an expected call of LoadPlugins
func (mr *MockIPluginLoaderMockRecorder) LoadPlugins(pluginFolder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPlugins", reflect.TypeOf((*MockIPluginLoader)(nil).LoadPlugins), pluginFolder)
}
