// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/INetworker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/gregod-com/grgd/interfaces"
	reflect "reflect"
)

// MockINetworker is a mock of INetworker interface
type MockINetworker struct {
	ctrl     *gomock.Controller
	recorder *MockINetworkerMockRecorder
}

// MockINetworkerMockRecorder is the mock recorder for MockINetworker
type MockINetworkerMockRecorder struct {
	mock *MockINetworker
}

// NewMockINetworker creates a new mock instance
func NewMockINetworker(ctrl *gomock.Controller) *MockINetworker {
	mock := &MockINetworker{ctrl: ctrl}
	mock.recorder = &MockINetworkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockINetworker) EXPECT() *MockINetworkerMockRecorder {
	return m.recorder
}

// CheckUpdate mocks base method
func (m *MockINetworker) CheckUpdate(version string, core interfaces.ICore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUpdate", version, core)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUpdate indicates an expected call of CheckUpdate
func (mr *MockINetworkerMockRecorder) CheckUpdate(version, core interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUpdate", reflect.TypeOf((*MockINetworker)(nil).CheckUpdate), version, core)
}

// CheckConnections mocks base method
func (m *MockINetworker) CheckConnections(conns map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckConnections", conns)
}

// CheckConnections indicates an expected call of CheckConnections
func (mr *MockINetworkerMockRecorder) CheckConnections(conns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConnections", reflect.TypeOf((*MockINetworker)(nil).CheckConnections), conns)
}

// Load mocks base method
func (m *MockINetworker) Load(filepath, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", filepath, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load
func (mr *MockINetworkerMockRecorder) Load(filepath, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockINetworker)(nil).Load), filepath, url)
}
