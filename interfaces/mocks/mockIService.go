// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/IService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIService is a mock of IService interface
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockIService) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockIServiceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIService)(nil).GetName))
}

// GetPath mocks base method
func (m *MockIService) GetPath(i ...interface{}) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPath", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath
func (mr *MockIServiceMockRecorder) GetPath(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockIService)(nil).GetPath), i...)
}

// SetPath mocks base method
func (m *MockIService) SetPath(path string, i ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetPath", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPath indicates an expected call of SetPath
func (mr *MockIServiceMockRecorder) SetPath(path interface{}, i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, i...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPath", reflect.TypeOf((*MockIService)(nil).SetPath), varargs...)
}

// GetActive mocks base method
func (m *MockIService) GetActive(i ...interface{}) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActive", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetActive indicates an expected call of GetActive
func (mr *MockIServiceMockRecorder) GetActive(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActive", reflect.TypeOf((*MockIService)(nil).GetActive), i...)
}

// SetActive mocks base method
func (m *MockIService) SetActive(active bool, i ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{active}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetActive", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActive indicates an expected call of SetActive
func (mr *MockIServiceMockRecorder) SetActive(active interface{}, i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{active}, i...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActive", reflect.TypeOf((*MockIService)(nil).SetActive), varargs...)
}

// ToggleActive mocks base method
func (m *MockIService) ToggleActive(i ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ToggleActive", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToggleActive indicates an expected call of ToggleActive
func (mr *MockIServiceMockRecorder) ToggleActive(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleActive", reflect.TypeOf((*MockIService)(nil).ToggleActive), i...)
}

// GetValues mocks base method
func (m *MockIService) GetValues(i ...interface{}) []string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetValues", varargs...)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetValues indicates an expected call of GetValues
func (mr *MockIServiceMockRecorder) GetValues(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValues", reflect.TypeOf((*MockIService)(nil).GetValues), i...)
}
