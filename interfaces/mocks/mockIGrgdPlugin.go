// Code generated by MockGen. DO NOT EDIT.
// Source: ../../grgdplugincontracts/IGrgdPlugin.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	grgdplugincontracts "github.com/gregod-com/grgdplugincontracts"
	reflect "reflect"
)

// MockIGrgdPlugin is a mock of IGrgdPlugin interface
type MockIGrgdPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockIGrgdPluginMockRecorder
}

// MockIGrgdPluginMockRecorder is the mock recorder for MockIGrgdPlugin
type MockIGrgdPluginMockRecorder struct {
	mock *MockIGrgdPlugin
}

// NewMockIGrgdPlugin creates a new mock instance
func NewMockIGrgdPlugin(ctrl *gomock.Controller) *MockIGrgdPlugin {
	mock := &MockIGrgdPlugin{ctrl: ctrl}
	mock.recorder = &MockIGrgdPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGrgdPlugin) EXPECT() *MockIGrgdPluginMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockIGrgdPlugin) Init(i interface{}) grgdplugincontracts.IPluginMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", i)
	ret0, _ := ret[0].(grgdplugincontracts.IPluginMetadata)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockIGrgdPluginMockRecorder) Init(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIGrgdPlugin)(nil).Init), i)
}

// GetMetaData mocks base method
func (m *MockIGrgdPlugin) GetMetaData(i interface{}) grgdplugincontracts.IPluginMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaData", i)
	ret0, _ := ret[0].(grgdplugincontracts.IPluginMetadata)
	return ret0
}

// GetMetaData indicates an expected call of GetMetaData
func (mr *MockIGrgdPluginMockRecorder) GetMetaData(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaData", reflect.TypeOf((*MockIGrgdPlugin)(nil).GetMetaData), i)
}
