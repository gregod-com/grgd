// Code generated by MockGen. DO NOT EDIT.
// Source: IConfigObject.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	interfaces "grgd/interfaces"
	reflect "reflect"
)

// MockIConfigObject is a mock of IConfigObject interface
type MockIConfigObject struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigObjectMockRecorder
}

// MockIConfigObjectMockRecorder is the mock recorder for MockIConfigObject
type MockIConfigObjectMockRecorder struct {
	mock *MockIConfigObject
}

// NewMockIConfigObject creates a new mock instance
func NewMockIConfigObject(ctrl *gomock.Controller) *MockIConfigObject {
	mock := &MockIConfigObject{ctrl: ctrl}
	mock.recorder = &MockIConfigObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIConfigObject) EXPECT() *MockIConfigObjectMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockIConfigObject) Save(i ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockIConfigObjectMockRecorder) Save(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIConfigObject)(nil).Save), i...)
}

// GetAllProfiles mocks base method
func (m *MockIConfigObject) GetAllProfiles() (map[string]interfaces.IProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProfiles")
	ret0, _ := ret[0].(map[string]interfaces.IProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProfiles indicates an expected call of GetAllProfiles
func (mr *MockIConfigObjectMockRecorder) GetAllProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProfiles", reflect.TypeOf((*MockIConfigObject)(nil).GetAllProfiles))
}

// GetProfile mocks base method
func (m *MockIConfigObject) GetProfile() interfaces.IProfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile")
	ret0, _ := ret[0].(interfaces.IProfile)
	return ret0
}

// GetProfile indicates an expected call of GetProfile
func (mr *MockIConfigObjectMockRecorder) GetProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockIConfigObject)(nil).GetProfile))
}

// GetProfileByName mocks base method
func (m *MockIConfigObject) GetProfileByName(profilename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByName", profilename)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetProfileByName indicates an expected call of GetProfileByName
func (mr *MockIConfigObjectMockRecorder) GetProfileByName(profilename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByName", reflect.TypeOf((*MockIConfigObject)(nil).GetProfileByName), profilename)
}

// AddProfile mocks base method
func (m *MockIConfigObject) AddProfile(p interfaces.IProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProfile", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProfile indicates an expected call of AddProfile
func (mr *MockIConfigObjectMockRecorder) AddProfile(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProfile", reflect.TypeOf((*MockIConfigObject)(nil).AddProfile), p)
}

// RemoveProfile mocks base method
func (m *MockIConfigObject) RemoveProfile(p interfaces.IProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProfile", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProfile indicates an expected call of RemoveProfile
func (mr *MockIConfigObjectMockRecorder) RemoveProfile(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProfile", reflect.TypeOf((*MockIConfigObject)(nil).RemoveProfile), p)
}

// GetAllProjects mocks base method
func (m *MockIConfigObject) GetAllProjects() (map[string][]interfaces.IProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProjects")
	ret0, _ := ret[0].(map[string][]interfaces.IProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProjects indicates an expected call of GetAllProjects
func (mr *MockIConfigObjectMockRecorder) GetAllProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProjects", reflect.TypeOf((*MockIConfigObject)(nil).GetAllProjects))
}

// GetProjects mocks base method
func (m *MockIConfigObject) GetProjects() (map[string]interfaces.IProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects")
	ret0, _ := ret[0].(map[string]interfaces.IProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects
func (mr *MockIConfigObjectMockRecorder) GetProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockIConfigObject)(nil).GetProjects))
}

// GetProjectByName mocks base method
func (m *MockIConfigObject) GetProjectByName(projectName string) (interfaces.IProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByName", projectName)
	ret0, _ := ret[0].(interfaces.IProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByName indicates an expected call of GetProjectByName
func (mr *MockIConfigObjectMockRecorder) GetProjectByName(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByName", reflect.TypeOf((*MockIConfigObject)(nil).GetProjectByName), projectName)
}

// AddProject mocks base method
func (m *MockIConfigObject) AddProject(p string, i ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{p}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProject", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProject indicates an expected call of AddProject
func (mr *MockIConfigObjectMockRecorder) AddProject(p interface{}, i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{p}, i...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProject", reflect.TypeOf((*MockIConfigObject)(nil).AddProject), varargs...)
}

// RemoveProject mocks base method
func (m *MockIConfigObject) RemoveProject(p interfaces.IProject, i ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{p}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveProject", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProject indicates an expected call of RemoveProject
func (mr *MockIConfigObjectMockRecorder) RemoveProject(p interface{}, i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{p}, i...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProject", reflect.TypeOf((*MockIConfigObject)(nil).RemoveProject), varargs...)
}

// SwitchCurrentProject mocks base method
func (m *MockIConfigObject) SwitchCurrentProject(i ...interface{}) (interfaces.IProject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SwitchCurrentProject", varargs...)
	ret0, _ := ret[0].(interfaces.IProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchCurrentProject indicates an expected call of SwitchCurrentProject
func (mr *MockIConfigObjectMockRecorder) SwitchCurrentProject(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchCurrentProject", reflect.TypeOf((*MockIConfigObject)(nil).SwitchCurrentProject), i...)
}

// GetConfigPath mocks base method
func (m *MockIConfigObject) GetConfigPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigPath indicates an expected call of GetConfigPath
func (mr *MockIConfigObjectMockRecorder) GetConfigPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigPath", reflect.TypeOf((*MockIConfigObject)(nil).GetConfigPath))
}

// SetConfigPath mocks base method
func (m *MockIConfigObject) SetConfigPath(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigPath", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigPath indicates an expected call of SetConfigPath
func (mr *MockIConfigObjectMockRecorder) SetConfigPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigPath", reflect.TypeOf((*MockIConfigObject)(nil).SetConfigPath), path)
}

// DumpConfig mocks base method
func (m *MockIConfigObject) DumpConfig(i ...interface{}) interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DumpConfig", varargs...)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// DumpConfig indicates an expected call of DumpConfig
func (mr *MockIConfigObjectMockRecorder) DumpConfig(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpConfig", reflect.TypeOf((*MockIConfigObject)(nil).DumpConfig), i...)
}
