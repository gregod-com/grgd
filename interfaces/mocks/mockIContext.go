// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/IContext.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/gregod-com/grgd/interfaces"
	cli "github.com/urfave/cli/v2"
	reflect "reflect"
)

// MockIContext is a mock of IContext interface
type MockIContext struct {
	ctrl     *gomock.Controller
	recorder *MockIContextMockRecorder
}

// MockIContextMockRecorder is the mock recorder for MockIContext
type MockIContextMockRecorder struct {
	mock *MockIContext
}

// NewMockIContext creates a new mock instance
func NewMockIContext(ctrl *gomock.Controller) *MockIContext {
	mock := &MockIContext{ctrl: ctrl}
	mock.recorder = &MockIContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIContext) EXPECT() *MockIContextMockRecorder {
	return m.recorder
}

// NumFlags mocks base method
func (m *MockIContext) NumFlags() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumFlags")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumFlags indicates an expected call of NumFlags
func (mr *MockIContextMockRecorder) NumFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumFlags", reflect.TypeOf((*MockIContext)(nil).NumFlags))
}

// Set mocks base method
func (m *MockIContext) Set(name, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockIContextMockRecorder) Set(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIContext)(nil).Set), name, value)
}

// IsSet mocks base method
func (m *MockIContext) IsSet(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSet", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSet indicates an expected call of IsSet
func (mr *MockIContextMockRecorder) IsSet(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSet", reflect.TypeOf((*MockIContext)(nil).IsSet), name)
}

// LocalFlagNames mocks base method
func (m *MockIContext) LocalFlagNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalFlagNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// LocalFlagNames indicates an expected call of LocalFlagNames
func (mr *MockIContextMockRecorder) LocalFlagNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalFlagNames", reflect.TypeOf((*MockIContext)(nil).LocalFlagNames))
}

// FlagNames mocks base method
func (m *MockIContext) FlagNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlagNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// FlagNames indicates an expected call of FlagNames
func (mr *MockIContextMockRecorder) FlagNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlagNames", reflect.TypeOf((*MockIContext)(nil).FlagNames))
}

// Lineage mocks base method
func (m *MockIContext) Lineage() []*interfaces.IContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lineage")
	ret0, _ := ret[0].([]*interfaces.IContext)
	return ret0
}

// Lineage indicates an expected call of Lineage
func (mr *MockIContextMockRecorder) Lineage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lineage", reflect.TypeOf((*MockIContext)(nil).Lineage))
}

// Value mocks base method
func (m *MockIContext) Value(name string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", name)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value
func (mr *MockIContextMockRecorder) Value(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockIContext)(nil).Value), name)
}

// Args mocks base method
func (m *MockIContext) Args() cli.Args {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].(cli.Args)
	return ret0
}

// Args indicates an expected call of Args
func (mr *MockIContextMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockIContext)(nil).Args))
}

// NArg mocks base method
func (m *MockIContext) NArg() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NArg")
	ret0, _ := ret[0].(int)
	return ret0
}

// NArg indicates an expected call of NArg
func (mr *MockIContextMockRecorder) NArg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NArg", reflect.TypeOf((*MockIContext)(nil).NArg))
}
