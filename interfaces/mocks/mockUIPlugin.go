// Code generated by MockGen. DO NOT EDIT.
// Source: ../grgdplugincontracts/IUIPlugin.go

// Package mock_helpers is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIUIPlugin is a mock of IUIPlugin interface
type MockIUIPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockIUIPluginMockRecorder
}

// MockIUIPluginMockRecorder is the mock recorder for MockIUIPlugin
type MockIUIPluginMockRecorder struct {
	mock *MockIUIPlugin
}

// NewMockIUIPlugin creates a new mock instance
func NewMockIUIPlugin(ctrl *gomock.Controller) *MockIUIPlugin {
	mock := &MockIUIPlugin{ctrl: ctrl}
	mock.recorder = &MockIUIPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIUIPlugin) EXPECT() *MockIUIPluginMockRecorder {
	return m.recorder
}

// ClearScreen mocks base method
func (m *MockIUIPlugin) ClearScreen(i interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearScreen", i)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// ClearScreen indicates an expected call of ClearScreen
func (mr *MockIUIPluginMockRecorder) ClearScreen(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearScreen", reflect.TypeOf((*MockIUIPlugin)(nil).ClearScreen), i)
}

// PrintPercentOfScreen mocks base method
func (m *MockIUIPlugin) PrintPercentOfScreen(i interface{}, str string, percent int) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintPercentOfScreen", i, str, percent)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// PrintPercentOfScreen indicates an expected call of PrintPercentOfScreen
func (mr *MockIUIPluginMockRecorder) PrintPercentOfScreen(i, str, percent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintPercentOfScreen", reflect.TypeOf((*MockIUIPlugin)(nil).PrintPercentOfScreen), i, str, percent)
}

// PrintBanner mocks base method
func (m *MockIUIPlugin) PrintBanner(i interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintBanner", i)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// PrintBanner indicates an expected call of PrintBanner
func (mr *MockIUIPluginMockRecorder) PrintBanner(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintBanner", reflect.TypeOf((*MockIUIPlugin)(nil).PrintBanner), i)
}

// PrintWorkloadOverview mocks base method
func (m *MockIUIPlugin) PrintWorkloadOverview(i interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintWorkloadOverview", i)
}

// PrintWorkloadOverview indicates an expected call of PrintWorkloadOverview
func (mr *MockIUIPluginMockRecorder) PrintWorkloadOverview(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintWorkloadOverview", reflect.TypeOf((*MockIUIPlugin)(nil).PrintWorkloadOverview), i)
}

// PrintTable mocks base method
func (m *MockIUIPlugin) PrintTable(i interface{}, heads []string, rows [][]string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintTable", i, heads, rows)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// PrintTable indicates an expected call of PrintTable
func (mr *MockIUIPluginMockRecorder) PrintTable(i, heads, rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintTable", reflect.TypeOf((*MockIUIPlugin)(nil).PrintTable), i, heads, rows)
}

// Println mocks base method
func (m *MockIUIPlugin) Println(i, str interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Println", i, str)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Println indicates an expected call of Println
func (mr *MockIUIPluginMockRecorder) Println(i, str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockIUIPlugin)(nil).Println), i, str)
}

// Printf mocks base method
func (m *MockIUIPlugin) Printf(str string, a ...interface{}) interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{str}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Printf", varargs...)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Printf indicates an expected call of Printf
func (mr *MockIUIPluginMockRecorder) Printf(str interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{str}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockIUIPlugin)(nil).Printf), varargs...)
}

// YesNoQuestion mocks base method
func (m *MockIUIPlugin) YesNoQuestion(i interface{}, question string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "YesNoQuestion", i, question)
	ret0, _ := ret[0].(bool)
	return ret0
}

// YesNoQuestion indicates an expected call of YesNoQuestion
func (mr *MockIUIPluginMockRecorder) YesNoQuestion(i, question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YesNoQuestion", reflect.TypeOf((*MockIUIPlugin)(nil).YesNoQuestion), i, question)
}

// Question mocks base method
func (m *MockIUIPlugin) Question(question string, i ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{question}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Question", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Question indicates an expected call of Question
func (mr *MockIUIPluginMockRecorder) Question(question interface{}, i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{question}, i...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Question", reflect.TypeOf((*MockIUIPlugin)(nil).Question), varargs...)
}
