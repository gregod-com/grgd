// Code generated by MockGen. DO NOT EDIT.
// Source: ../../grgdplugincontracts/IPluginMetadata.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIPluginMetadata is a mock of IPluginMetadata interface
type MockIPluginMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockIPluginMetadataMockRecorder
}

// MockIPluginMetadataMockRecorder is the mock recorder for MockIPluginMetadata
type MockIPluginMetadataMockRecorder struct {
	mock *MockIPluginMetadata
}

// NewMockIPluginMetadata creates a new mock instance
func NewMockIPluginMetadata(ctrl *gomock.Controller) *MockIPluginMetadata {
	mock := &MockIPluginMetadata{ctrl: ctrl}
	mock.recorder = &MockIPluginMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPluginMetadata) EXPECT() *MockIPluginMetadataMockRecorder {
	return m.recorder
}

// GetFullname mocks base method
func (m *MockIPluginMetadata) GetFullname() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullname")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFullname indicates an expected call of GetFullname
func (mr *MockIPluginMetadataMockRecorder) GetFullname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullname", reflect.TypeOf((*MockIPluginMetadata)(nil).GetFullname))
}

// GetIdentifier mocks base method
func (m *MockIPluginMetadata) GetIdentifier() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentifier")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIdentifier indicates an expected call of GetIdentifier
func (mr *MockIPluginMetadataMockRecorder) GetIdentifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentifier", reflect.TypeOf((*MockIPluginMetadata)(nil).GetIdentifier))
}

// GetName mocks base method
func (m *MockIPluginMetadata) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockIPluginMetadataMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIPluginMetadata)(nil).GetName))
}

// GetVersion mocks base method
func (m *MockIPluginMetadata) GetVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockIPluginMetadataMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockIPluginMetadata)(nil).GetVersion))
}

// GetURL mocks base method
func (m *MockIPluginMetadata) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL
func (mr *MockIPluginMetadataMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockIPluginMetadata)(nil).GetURL))
}

// GetCategory mocks base method
func (m *MockIPluginMetadata) GetCategory() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCategory indicates an expected call of GetCategory
func (mr *MockIPluginMetadataMockRecorder) GetCategory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockIPluginMetadata)(nil).GetCategory))
}

// GetActive mocks base method
func (m *MockIPluginMetadata) GetActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetActive indicates an expected call of GetActive
func (mr *MockIPluginMetadataMockRecorder) GetActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActive", reflect.TypeOf((*MockIPluginMetadata)(nil).GetActive))
}

// GetPath mocks base method
func (m *MockIPluginMetadata) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath
func (mr *MockIPluginMetadataMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockIPluginMetadata)(nil).GetPath))
}

// GetLoaded mocks base method
func (m *MockIPluginMetadata) GetLoaded() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoaded")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetLoaded indicates an expected call of GetLoaded
func (mr *MockIPluginMetadataMockRecorder) GetLoaded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoaded", reflect.TypeOf((*MockIPluginMetadata)(nil).GetLoaded))
}

// SetLoaded mocks base method
func (m *MockIPluginMetadata) SetLoaded(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLoaded", arg0)
}

// SetLoaded indicates an expected call of SetLoaded
func (mr *MockIPluginMetadataMockRecorder) SetLoaded(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoaded", reflect.TypeOf((*MockIPluginMetadata)(nil).SetLoaded), arg0)
}

// SetActive mocks base method
func (m *MockIPluginMetadata) SetActive(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActive", arg0)
}

// SetActive indicates an expected call of SetActive
func (mr *MockIPluginMetadataMockRecorder) SetActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActive", reflect.TypeOf((*MockIPluginMetadata)(nil).SetActive), arg0)
}

// ToggleActive mocks base method
func (m *MockIPluginMetadata) ToggleActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ToggleActive indicates an expected call of ToggleActive
func (mr *MockIPluginMetadataMockRecorder) ToggleActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleActive", reflect.TypeOf((*MockIPluginMetadata)(nil).ToggleActive))
}

// SetPath mocks base method
func (m *MockIPluginMetadata) SetPath(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPath", arg0)
}

// SetPath indicates an expected call of SetPath
func (mr *MockIPluginMetadataMockRecorder) SetPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPath", reflect.TypeOf((*MockIPluginMetadata)(nil).SetPath), arg0)
}
