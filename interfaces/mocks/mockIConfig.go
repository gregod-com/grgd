// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/IConfig.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/gregod-com/grgd/interfaces"
	reflect "reflect"
)

// MockIConfig is a mock of IConfig interface
type MockIConfig struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigMockRecorder
}

// MockIConfigMockRecorder is the mock recorder for MockIConfig
type MockIConfigMockRecorder struct {
	mock *MockIConfig
}

// NewMockIConfig creates a new mock instance
func NewMockIConfig(ctrl *gomock.Controller) *MockIConfig {
	mock := &MockIConfig{ctrl: ctrl}
	mock.recorder = &MockIConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIConfig) EXPECT() *MockIConfigMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockIConfig) Save(i ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockIConfigMockRecorder) Save(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIConfig)(nil).Save), i...)
}

// SetActiveProfile mocks base method
func (m *MockIConfig) SetActiveProfile(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActiveProfile", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActiveProfile indicates an expected call of SetActiveProfile
func (mr *MockIConfigMockRecorder) SetActiveProfile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveProfile", reflect.TypeOf((*MockIConfig)(nil).SetActiveProfile), name)
}

// GetActiveProfile mocks base method
func (m *MockIConfig) GetActiveProfile() interfaces.IProfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveProfile")
	ret0, _ := ret[0].(interfaces.IProfile)
	return ret0
}

// GetActiveProfile indicates an expected call of GetActiveProfile
func (mr *MockIConfigMockRecorder) GetActiveProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveProfile", reflect.TypeOf((*MockIConfig)(nil).GetActiveProfile))
}

// GetAllProfiles mocks base method
func (m *MockIConfig) GetAllProfiles() (map[string]interfaces.IProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProfiles")
	ret0, _ := ret[0].(map[string]interfaces.IProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProfiles indicates an expected call of GetAllProfiles
func (mr *MockIConfigMockRecorder) GetAllProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProfiles", reflect.TypeOf((*MockIConfig)(nil).GetAllProfiles))
}

// GetActiveProfileByName mocks base method
func (m *MockIConfig) GetActiveProfileByName(profilename string) (interfaces.IProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveProfileByName", profilename)
	ret0, _ := ret[0].(interfaces.IProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveProfileByName indicates an expected call of GetActiveProfileByName
func (mr *MockIConfigMockRecorder) GetActiveProfileByName(profilename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveProfileByName", reflect.TypeOf((*MockIConfig)(nil).GetActiveProfileByName), profilename)
}

// AddProfile mocks base method
func (m *MockIConfig) AddProfile(p interfaces.IProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProfile", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProfile indicates an expected call of AddProfile
func (mr *MockIConfigMockRecorder) AddProfile(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProfile", reflect.TypeOf((*MockIConfig)(nil).AddProfile), p)
}

// RemoveProfile mocks base method
func (m *MockIConfig) RemoveProfile(p interfaces.IProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProfile", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProfile indicates an expected call of RemoveProfile
func (mr *MockIConfigMockRecorder) RemoveProfile(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProfile", reflect.TypeOf((*MockIConfig)(nil).RemoveProfile), p)
}

// GetAllProjects mocks base method
func (m *MockIConfig) GetAllProjects() (map[string][]interfaces.IProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProjects")
	ret0, _ := ret[0].(map[string][]interfaces.IProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProjects indicates an expected call of GetAllProjects
func (mr *MockIConfigMockRecorder) GetAllProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProjects", reflect.TypeOf((*MockIConfig)(nil).GetAllProjects))
}

// GetProjects mocks base method
func (m *MockIConfig) GetProjects() (map[string]interfaces.IProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects")
	ret0, _ := ret[0].(map[string]interfaces.IProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects
func (mr *MockIConfigMockRecorder) GetProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockIConfig)(nil).GetProjects))
}

// GetProjectByName mocks base method
func (m *MockIConfig) GetProjectByName(projectName string) (interfaces.IProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByName", projectName)
	ret0, _ := ret[0].(interfaces.IProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByName indicates an expected call of GetProjectByName
func (mr *MockIConfigMockRecorder) GetProjectByName(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByName", reflect.TypeOf((*MockIConfig)(nil).GetProjectByName), projectName)
}

// AddProject mocks base method
func (m *MockIConfig) AddProject(p string, i ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{p}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProject", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProject indicates an expected call of AddProject
func (mr *MockIConfigMockRecorder) AddProject(p interface{}, i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{p}, i...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProject", reflect.TypeOf((*MockIConfig)(nil).AddProject), varargs...)
}

// RemoveProject mocks base method
func (m *MockIConfig) RemoveProject(p interfaces.IProject, i ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{p}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveProject", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProject indicates an expected call of RemoveProject
func (mr *MockIConfigMockRecorder) RemoveProject(p interface{}, i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{p}, i...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProject", reflect.TypeOf((*MockIConfig)(nil).RemoveProject), varargs...)
}

// SwitchCurrentProject mocks base method
func (m *MockIConfig) SwitchCurrentProject(i ...interface{}) (interfaces.IProject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SwitchCurrentProject", varargs...)
	ret0, _ := ret[0].(interfaces.IProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchCurrentProject indicates an expected call of SwitchCurrentProject
func (mr *MockIConfigMockRecorder) SwitchCurrentProject(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchCurrentProject", reflect.TypeOf((*MockIConfig)(nil).SwitchCurrentProject), i...)
}

// GetConfigPath mocks base method
func (m *MockIConfig) GetConfigPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigPath indicates an expected call of GetConfigPath
func (mr *MockIConfigMockRecorder) GetConfigPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigPath", reflect.TypeOf((*MockIConfig)(nil).GetConfigPath))
}

// SetConfigPath mocks base method
func (m *MockIConfig) SetConfigPath(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigPath", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigPath indicates an expected call of SetConfigPath
func (mr *MockIConfigMockRecorder) SetConfigPath(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigPath", reflect.TypeOf((*MockIConfig)(nil).SetConfigPath), path)
}

// DumpConfig mocks base method
func (m *MockIConfig) DumpConfig(i ...interface{}) interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DumpConfig", varargs...)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// DumpConfig indicates an expected call of DumpConfig
func (mr *MockIConfigMockRecorder) DumpConfig(i ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpConfig", reflect.TypeOf((*MockIConfig)(nil).DumpConfig), i...)
}
