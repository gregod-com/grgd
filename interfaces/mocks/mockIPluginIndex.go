// Code generated by MockGen. DO NOT EDIT.
// Source: ../../grgdplugincontracts/IPluginIndex.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	grgdplugincontracts "github.com/gregod-com/grgdplugincontracts"
	reflect "reflect"
	time "time"
)

// MockIPluginIndex is a mock of IPluginIndex interface
type MockIPluginIndex struct {
	ctrl     *gomock.Controller
	recorder *MockIPluginIndexMockRecorder
}

// MockIPluginIndexMockRecorder is the mock recorder for MockIPluginIndex
type MockIPluginIndexMockRecorder struct {
	mock *MockIPluginIndex
}

// NewMockIPluginIndex creates a new mock instance
func NewMockIPluginIndex(ctrl *gomock.Controller) *MockIPluginIndex {
	mock := &MockIPluginIndex{ctrl: ctrl}
	mock.recorder = &MockIPluginIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPluginIndex) EXPECT() *MockIPluginIndexMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockIPluginIndex) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockIPluginIndexMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPluginIndex)(nil).Update))
}

// GetConfigPath mocks base method
func (m *MockIPluginIndex) GetConfigPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConfigPath indicates an expected call of GetConfigPath
func (mr *MockIPluginIndexMockRecorder) GetConfigPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigPath", reflect.TypeOf((*MockIPluginIndex)(nil).GetConfigPath))
}

// GetPluginList mocks base method
func (m *MockIPluginIndex) GetPluginList() map[string]grgdplugincontracts.IPluginMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginList")
	ret0, _ := ret[0].(map[string]grgdplugincontracts.IPluginMetadata)
	return ret0
}

// GetPluginList indicates an expected call of GetPluginList
func (mr *MockIPluginIndexMockRecorder) GetPluginList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginList", reflect.TypeOf((*MockIPluginIndex)(nil).GetPluginList))
}

// GetPluginListActive mocks base method
func (m *MockIPluginIndex) GetPluginListActive() []grgdplugincontracts.IPluginMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginListActive")
	ret0, _ := ret[0].([]grgdplugincontracts.IPluginMetadata)
	return ret0
}

// GetPluginListActive indicates an expected call of GetPluginListActive
func (mr *MockIPluginIndexMockRecorder) GetPluginListActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginListActive", reflect.TypeOf((*MockIPluginIndex)(nil).GetPluginListActive))
}

// GetPluginListInactive mocks base method
func (m *MockIPluginIndex) GetPluginListInactive() []grgdplugincontracts.IPluginMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginListInactive")
	ret0, _ := ret[0].([]grgdplugincontracts.IPluginMetadata)
	return ret0
}

// GetPluginListInactive indicates an expected call of GetPluginListInactive
func (mr *MockIPluginIndexMockRecorder) GetPluginListInactive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginListInactive", reflect.TypeOf((*MockIPluginIndex)(nil).GetPluginListInactive))
}

// GetPluginListOffline mocks base method
func (m *MockIPluginIndex) GetPluginListOffline() []grgdplugincontracts.IPluginMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginListOffline")
	ret0, _ := ret[0].([]grgdplugincontracts.IPluginMetadata)
	return ret0
}

// GetPluginListOffline indicates an expected call of GetPluginListOffline
func (mr *MockIPluginIndexMockRecorder) GetPluginListOffline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginListOffline", reflect.TypeOf((*MockIPluginIndex)(nil).GetPluginListOffline))
}

// GetLastChecked mocks base method
func (m *MockIPluginIndex) GetLastChecked() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastChecked")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastChecked indicates an expected call of GetLastChecked
func (mr *MockIPluginIndexMockRecorder) GetLastChecked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastChecked", reflect.TypeOf((*MockIPluginIndex)(nil).GetLastChecked))
}

// AddPlugin mocks base method
func (m *MockIPluginIndex) AddPlugin(newplug grgdplugincontracts.IPluginMetadata) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlugin", newplug)
	ret0, _ := ret[0].(string)
	return ret0
}

// AddPlugin indicates an expected call of AddPlugin
func (mr *MockIPluginIndexMockRecorder) AddPlugin(newplug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlugin", reflect.TypeOf((*MockIPluginIndex)(nil).AddPlugin), newplug)
}

// ToggleActive mocks base method
func (m *MockIPluginIndex) ToggleActive(plugID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleActive", plugID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ToggleActive indicates an expected call of ToggleActive
func (mr *MockIPluginIndexMockRecorder) ToggleActive(plugID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleActive", reflect.TypeOf((*MockIPluginIndex)(nil).ToggleActive), plugID)
}

// Finalize mocks base method
func (m *MockIPluginIndex) Finalize(activePlugins, availablePlugins []grgdplugincontracts.IPluginMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finalize", activePlugins, availablePlugins)
	ret0, _ := ret[0].(error)
	return ret0
}

// Finalize indicates an expected call of Finalize
func (mr *MockIPluginIndexMockRecorder) Finalize(activePlugins, availablePlugins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockIPluginIndex)(nil).Finalize), activePlugins, availablePlugins)
}

// UnmarshalYAML mocks base method
func (m *MockIPluginIndex) UnmarshalYAML(unmarshal func(interface{}) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalYAML", unmarshal)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalYAML indicates an expected call of UnmarshalYAML
func (mr *MockIPluginIndexMockRecorder) UnmarshalYAML(unmarshal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalYAML", reflect.TypeOf((*MockIPluginIndex)(nil).UnmarshalYAML), unmarshal)
}
